from argparse import ArgumentParser
import pickle
from pprint import pprint

def get_parser() -> ArgumentParser:
    parser = ArgumentParser( description="IP-Version-Stats: A tool to monitor network traffic and obtain IPv4 vs IPv6 traffic statistics." )

    # Arguments
    parser.add_argument( '-o', dest='out_path', type=str, required=True,
                         help="Path to the output pickle file generated by analysis.py" )

    return parser

def main():
    # Parse command line arguments
    parser = get_parser()
    args = parser.parse_args()

    with open( args.out_path, 'rb' ) as outfile:
        ( _, _, _, interval_stats, _, _ ) = pickle.load( outfile )

    domains = {}
    asns = {}

    for entry in interval_stats.values():
        for protocol, protocol_domain in entry[ 'domains' ].items():
            for domain, count in protocol_domain.items():
                if domain not in domains:
                    domains[ domain ] = { 'v4TCPSynAck': 0, 'v6TCPSynAck': 0,
                                          'v4TCP': 0, 'v4UDP': 0, 'v6TCP': 0, 'v6UDP': 0 }
                domains[ domain ][ protocol ] += count
        for protocol, protocol_as in entry[ 'as' ].items():
            for asn, count in protocol_as.items():
                if asn not in asns:
                    asns[ asn ] = { 'v4TCPSynAck': 0, 'v6TCPSynAck': 0,
                                    'v4TCP': 0, 'v4UDP': 0, 'v6TCP': 0, 'v6UDP': 0 }
                asns[ asn ][ protocol ] += count

    # Domains
    print( "Domains with highest TCP traffic and their IPv6 traffic percentage:" )
    domainTcpVol = { domain: ( entry[ 'v4TCP' ] + entry[ 'v6TCP' ] )
                     for domain, entry in domains.items() }
    domainTcpResults = { k: ( v, ( 100 * domains[ k ][ 'v6TCP' ] / v ) )
                         for k, v in sorted( domainTcpVol.items(), reverse=True,  key=lambda item: item[ 1 ] )
                         if v > 0 }
    print( domainTcpResults )
    print()

    print( "Domains with highest UDP traffic and their IPv6 traffic percentage:" )
    domainUdpVol = { domain: ( entry[ 'v4UDP' ] + entry[ 'v6UDP' ] )
                     for domain, entry in domains.items() }
    domainUdpResults = { k: ( v, ( 100 * domains[ k ][ 'v6UDP' ] / v ) )
                         for k, v in sorted( domainUdpVol.items(), reverse=True,  key=lambda item: item[ 1 ] )
                         if v > 0 }
    print( domainUdpResults )
    print()

    # AS
    print( "ASNs with highest TCP traffic and their IPv6 traffic percentage:" )
    asnTcpVol = { asn: ( entry[ 'v4TCP' ] + entry[ 'v6TCP' ] )
                     for asn, entry in asns.items() }
    asnTcpResults = { k: ( v, ( 100 * asns[ k ][ 'v6TCP' ] / v ) )
                         for k, v in sorted( asnTcpVol.items(), reverse=True,  key=lambda item: item[ 1 ] )
                         if v > 0 }
    print( asnTcpResults )
    print()

    print( "ASNs with highest UDP traffic and their IPv6 traffic percentage:" )
    asnUdpVol = { asn: ( entry[ 'v4UDP' ] + entry[ 'v6UDP' ] )
                     for asn, entry in asns.items() }
    asnUdpResults = { k: ( v, ( 100 * asns[ k ][ 'v6UDP' ] / v ) )
                         for k, v in sorted( asnUdpVol.items(), reverse=True,  key=lambda item: item[ 1 ] )
                         if v > 0 }
    print( asnUdpResults )

if __name__ == "__main__":
    main()