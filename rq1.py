from argparse import ArgumentParser
from datetime import datetime
import re
from copy import deepcopy

import matplotlib.pyplot as plt
from matplotlib import dates

def get_parser() -> ArgumentParser:
    parser = ArgumentParser( description="IP-Version-Stats: A tool to monitor network traffic and obtain IPv4 vs IPv6 traffic statistics." )

    # Arguments
    parser.add_argument( '-o', '--outpath', dest='outpath', type=str,
                         help="Path to the cnt file generated by the sniffer tool" )

    return parser

def main():
    # Parse command line arguments
    parser = get_parser()
    args = parser.parse_args()

    counts = {}
    pattern = re.compile( "Counters at ([\d\-: ]+):.*IPv4Stats.*"
                          "v4_tcp_tx.*packets (\d+) bytes (\d+).*v4_tcp_rx.*packets (\d+) bytes (\d+).*"
                          "v4_udp_tx.*packets (\d+) bytes (\d+).*v4_udp_rx.*packets (\d+) bytes (\d+).*"
                          "IPv6Stats.*"
                          "v6_tcp_tx.*packets (\d+) bytes (\d+).*v6_tcp_rx.*packets (\d+) bytes (\d+).*"
                          "v6_udp_tx.*packets (\d+) bytes (\d+).*v6_udp_rx.*packets (\d+) bytes (\d+).*" )
    with open( args.outpath ) as countfile:
        content = countfile.read()
    content = content.replace( '\n\n', '###' )  # Add hacc markers
    content = content.replace( '\t', '' )       # Don't care about tabs
    content = content.replace( '\n', ' ' )      # One line per entry
    entries = content.split( '###' )            # Hacc
    for entry in entries:
        matched = pattern.match( entry )
        if matched is not None:
            info = matched.groups()
            timestamp = datetime.strptime( info[ 0 ], '%Y-%m-%d %H:%M' )
            counts[ timestamp ] = { 'v4_tcp_tx': ( int( info[ 1 ] ), int( info[ 2 ] ) ),    'v4_tcp_rx': ( int( info[ 3 ] ), int( info[ 4 ] ) ) ,
                                    'v4_udp_tx': ( int( info[ 5 ] ), int( info[ 6 ] ) ),    'v4_udp_rx': ( int( info[ 7 ] ), int( info[ 8 ] ) ),
                                    'v6_tcp_tx': ( int( info[ 9 ] ), int( info[ 10 ] ) ),   'v6_tcp_rx': ( int( info[ 11 ] ), int( info[ 12 ] ) ),
                                    'v6_udp_tx': ( int( info[ 13 ] ), int( info[ 14 ] ) ),  'v6_udp_rx': ( int( info[ 15 ] ), int( info[ 16 ] ) ) }
    timestamps = list( counts.keys() )
    delta_counts = deepcopy( counts )
    for i in range( len( timestamps ) - 1 ):
        prev = timestamps[ i ]
        cur = timestamps[ i+1 ]
        for field in ( 'v4_tcp_tx', 'v4_tcp_rx', 'v4_udp_tx', 'v4_udp_rx',
                       'v6_tcp_tx', 'v6_tcp_rx', 'v6_udp_tx', 'v6_udp_rx' ):
            delta_counts[ cur ][ field ] = ( counts[ cur ][ field ][ 0 ] - counts[ prev ][ field ][ 0 ],
                                             counts[ cur ][ field ][ 1 ] - counts[ prev ][ field ][ 1 ] )
    
    # Set up plot
    _, ( ax_pkts, ax_bytes ) = plt.subplots( 2, 1 )
    plt.ion()
    plt.get_current_fig_manager().full_screen_toggle()
    # Plot 1: IPv4 and IPv6 packets vs Time
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v4_tcp_tx' ][ 0 ] for entry in delta_counts.values() ], label='IPv4 TCP Tx' )
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v4_tcp_rx' ][ 0 ] for entry in delta_counts.values() ], label='IPv4 TCP Rx' )
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v4_udp_tx' ][ 0 ] for entry in delta_counts.values() ], label='IPv4 UDP Tx' )
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v4_udp_rx' ][ 0 ] for entry in delta_counts.values() ], label='IPv4 UDP Rx' )
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v6_tcp_tx' ][ 0 ] for entry in delta_counts.values() ], label='IPv6 TCP Tx' )
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v6_tcp_rx' ][ 0 ] for entry in delta_counts.values() ], label='IPv6 TCP Rx' )
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v6_udp_tx' ][ 0 ] for entry in delta_counts.values() ], label='IPv6 UDP Tx' )
    ax_pkts.plot( delta_counts.keys(), [ entry[ 'v6_udp_rx' ][ 0 ] for entry in delta_counts.values() ], label='IPv6 UDP Rx' )
    ax_pkts.set_title( 'IPv4 and IPv6 traffic vs Time (in number of packets)' )
    ax_pkts.set_xlabel( 'Timestamp' )
    ax_pkts.set_ylabel( '# of Packets' )
    # ax_pkts.set_yscale( 'log' )
    ax_pkts.xaxis.set_major_formatter( dates.DateFormatter( '%Y-%m-%d %H:%M' ) )
    ax_pkts.xaxis.set_major_locator( dates.AutoDateLocator() )
    ax_pkts.legend( loc='upper right' )

    # Plot 2: IPv4 and IPv6 bytes vs Time
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v4_tcp_tx' ][ 1 ] for entry in delta_counts.values() ], label='IPv4 TCP Tx' )
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v4_tcp_rx' ][ 1 ] for entry in delta_counts.values() ], label='IPv4 TCP Rx' )
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v4_udp_tx' ][ 1 ] for entry in delta_counts.values() ], label='IPv4 UDP Tx' )
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v4_udp_rx' ][ 1 ] for entry in delta_counts.values() ], label='IPv4 UDP Rx' )
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v6_tcp_tx' ][ 1 ] for entry in delta_counts.values() ], label='IPv6 TCP Tx' )
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v6_tcp_rx' ][ 1 ] for entry in delta_counts.values() ], label='IPv6 TCP Rx' )
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v6_udp_tx' ][ 1 ] for entry in delta_counts.values() ], label='IPv6 UDP Tx' )
    ax_bytes.plot( delta_counts.keys(), [ entry[ 'v6_udp_rx' ][ 1 ] for entry in delta_counts.values() ], label='IPv6 UDP Rx' )
    ax_bytes.set_title( 'IPv4 and IPv6 traffic vs Time (in bytes)' )
    ax_bytes.set_xlabel( 'Timestamp' )
    ax_bytes.set_ylabel( 'Bytes' )
    # ax_bytes.set_yscale( 'log' )
    ax_bytes.xaxis.set_major_formatter( dates.DateFormatter( '%Y-%m-%d %H:%M' ) )
    ax_bytes.xaxis.set_major_locator( dates.AutoDateLocator() )
    ax_bytes.legend( loc='upper right' )

    # Text outputs
    last_timestamp = timestamps[ -1 ]
    for index, metric in zip( ( 0, 1 ), ( 'packets', 'bytes' ) ):
        tcp_ipv4_total = counts[ last_timestamp ][ 'v4_tcp_tx' ][ index ] + counts[ last_timestamp ][ 'v4_tcp_rx' ][ index ]
        udp_ipv4_total = counts[ last_timestamp ][ 'v4_udp_tx' ][ index ] + counts[ last_timestamp ][ 'v4_udp_rx' ][ index ]
        tcp_ipv6_total = counts[ last_timestamp ][ 'v6_tcp_tx' ][ index ] + counts[ last_timestamp ][ 'v6_tcp_rx' ][ index ]
        udp_ipv6_total = counts[ last_timestamp ][ 'v6_udp_tx' ][ index ] + counts[ last_timestamp ][ 'v6_udp_rx' ][ index ]
        tcp_ipv4_pct = 100 * tcp_ipv4_total / ( tcp_ipv4_total + tcp_ipv6_total )
        udp_ipv4_pct = 100 * udp_ipv4_total / ( udp_ipv4_total + udp_ipv6_total )
        print( f"Percentage breakdown of TCP traffic (in {metric}): IPv4: {tcp_ipv4_pct: .2f}, IPv6: {( 100 - tcp_ipv4_pct ): .2f}" )
        print( f"Percentage breakdown of UDP traffic (in {metric}): IPv4: {udp_ipv4_pct: .2f}, IPv6: {( 100 - udp_ipv4_pct ): .2f}" )

    plt.draw()
    plt.waitforbuttonpress()

if __name__ == "__main__":
    main()