from argparse import ArgumentParser
import pickle

import matplotlib.pyplot as plt
from matplotlib import dates

def get_parser() -> ArgumentParser:
    parser = ArgumentParser( description="IP-Version-Stats: A tool to monitor network traffic and obtain IPv4 vs IPv6 traffic statistics." )

    # Arguments
    parser.add_argument( '-o', dest='out_path', type=str, required=True,
                         help="Path to the output pickle file generated by analysis.py" )

    return parser

def main():
    # Parse command line arguments
    parser = get_parser()
    args = parser.parse_args()

    with open( args.out_path, 'rb' ) as outfile:
        ( timestamps, counts, delta_counts, _, _, _ ) = pickle.load( outfile )
    
    # Set up plot
    fig, ( ( ax_pkts, ax_bytes ), ( ax_pkts_delta, ax_bytes_delta ) ) = plt.subplots( 2, 2 )
    fig.tight_layout( h_pad=2 )
    plt.ion()
    plt.get_current_fig_manager().full_screen_toggle()

    # Plot 1: IPv4 and IPv6 packets vs Time (Cumulative)
    ax_pkts.plot( counts.keys(), [ entry[ 'v4_tcp_txrx' ][ 0 ] for entry in counts.values() ], color='red', label='IPv4 TCP Tx/Rx' )
    ax_pkts.plot( counts.keys(), [ entry[ 'v4_udp_txrx' ][ 0 ] for entry in counts.values() ], color='orange', label='IPv4 UDP Tx/Rx' )
    ax_pkts.plot( counts.keys(), [ entry[ 'v6_tcp_txrx' ][ 0 ] for entry in counts.values() ], color='blue', label='IPv6 TCP Tx/Rx' )
    ax_pkts.plot( counts.keys(), [ entry[ 'v6_udp_txrx' ][ 0 ] for entry in counts.values() ], color='green', label='IPv6 UDP Tx/Rx' )
    ax_pkts.set_title( 'IPv4 and IPv6 traffic (packets, cumulative) vs Time' )
    ax_pkts.set_xlabel( 'Timestamp' )
    ax_pkts.set_ylabel( '# of Packets' )
    # ax_pkts.set_yscale( 'log' )
    ax_pkts.xaxis.set_major_formatter( dates.DateFormatter( '%m/%d %H:%M' ) )
    ax_pkts.xaxis.set_major_locator( dates.AutoDateLocator() )
    ax_pkts.legend( loc='upper left' )

    # Plot 2: IPv4 and IPv6 bytes vs Time (Cumulative)
    ax_bytes.plot( counts.keys(), [ entry[ 'v4_tcp_txrx' ][ 1 ] for entry in counts.values() ], color='red', label='IPv4 TCP Tx/Rx' )
    ax_bytes.plot( counts.keys(), [ entry[ 'v4_udp_txrx' ][ 1 ] for entry in counts.values() ], color='orange', label='IPv4 UDP Tx/Rx' )
    ax_bytes.plot( counts.keys(), [ entry[ 'v6_tcp_txrx' ][ 1 ] for entry in counts.values() ], color='blue', label='IPv6 TCP Tx/Rx' )
    ax_bytes.plot( counts.keys(), [ entry[ 'v6_udp_txrx' ][ 1 ] for entry in counts.values() ], color='green', label='IPv6 UDP Tx/Rx' )
    ax_bytes.set_title( 'IPv4 and IPv6 traffic (bytes, cumulative) vs Time' )
    ax_bytes.set_xlabel( 'Timestamp' )
    ax_bytes.set_ylabel( 'Bytes' )
    # ax_bytes.set_yscale( 'log' )
    ax_bytes.xaxis.set_major_formatter( dates.DateFormatter( '%m/%d %H:%M' ) )
    ax_bytes.xaxis.set_major_locator( dates.AutoDateLocator() )
    ax_bytes.legend( loc='upper left' )

        
    # Plot 3: IPv4 and IPv6 packets vs Time
    ax_pkts_delta.plot( delta_counts.keys(), [ entry[ 'v4_tcp_txrx' ][ 0 ] for entry in delta_counts.values() ], color='red',
                        label='IPv4 TCP Tx/Rx' )
    ax_pkts_delta.plot( delta_counts.keys(), [ entry[ 'v4_udp_txrx' ][ 0 ] for entry in delta_counts.values() ], color='orange',
                        label='IPv4 UDP Tx/Rx' )
    ax_pkts_delta.plot( delta_counts.keys(), [ entry[ 'v6_tcp_txrx' ][ 0 ] for entry in delta_counts.values() ], color='blue',
                        label='IPv6 TCP Tx/Rx' )
    ax_pkts_delta.plot( delta_counts.keys(), [ entry[ 'v6_udp_txrx' ][ 0 ] for entry in delta_counts.values() ], color='green',
                        label='IPv6 UDP Tx/Rx' )
    ax_pkts_delta.set_title( 'IPv4 and IPv6 traffic (packets) vs Time' )
    ax_pkts_delta.set_xlabel( 'Timestamp' )
    ax_pkts_delta.set_ylabel( '# of Packets' )
    # ax_pkts_delta.set_yscale( 'log' )
    ax_pkts_delta.xaxis.set_major_formatter( dates.DateFormatter( '%m/%d %H:%M' ) )
    ax_pkts_delta.xaxis.set_major_locator( dates.AutoDateLocator() )
    ax_pkts_delta.legend( loc='upper right' )

    # Plot 4: IPv4 and IPv6 bytes vs Time
    ax_bytes_delta.plot( delta_counts.keys(), [ entry[ 'v4_tcp_txrx' ][ 1 ] for entry in delta_counts.values() ], color='red',
                         label='IPv4 TCP Tx/Rx' )
    ax_bytes_delta.plot( delta_counts.keys(), [ entry[ 'v4_udp_txrx' ][ 1 ] for entry in delta_counts.values() ], color='orange',
                         label='IPv4 UDP Tx/Rx' )
    ax_bytes_delta.plot( delta_counts.keys(), [ entry[ 'v6_tcp_txrx' ][ 1 ] for entry in delta_counts.values() ], color='blue',
                         label='IPv6 TCP Tx/Rx' )
    ax_bytes_delta.plot( delta_counts.keys(), [ entry[ 'v6_udp_txrx' ][ 1 ] for entry in delta_counts.values() ], color='green',
                         label='IPv6 UDP Tx/Rx' )
    ax_bytes_delta.set_title( 'IPv4 and IPv6 traffic (bytes) vs Time' )
    ax_bytes_delta.set_xlabel( 'Timestamp' )
    ax_bytes_delta.set_ylabel( 'Bytes' )
    # ax_bytes_delta.set_yscale( 'log' )
    ax_bytes_delta.xaxis.set_major_formatter( dates.DateFormatter( '%m/%d %H:%M' ) )
    ax_bytes_delta.xaxis.set_major_locator( dates.AutoDateLocator() )
    ax_bytes_delta.legend( loc='upper right' )

    # Text outputs
    last_timestamp = timestamps[ -1 ]
    for index, metric in zip( ( 0, 1 ), ( 'packets', 'bytes' ) ):
        tcp_ipv4_pct = 100 * counts[ last_timestamp ][ 'v4_tcp_txrx' ][ index ] / ( counts[ last_timestamp ][ 'v4_tcp_txrx' ][ index ] +
                                                                                    counts[ last_timestamp ][ 'v6_tcp_txrx' ][ index ] )
        udp_ipv4_pct = 100 * counts[ last_timestamp ][ 'v4_udp_txrx' ][ index ] / ( counts[ last_timestamp ][ 'v4_udp_txrx' ][ index ] +
                                                                                    counts[ last_timestamp ][ 'v6_udp_txrx' ][ index ] )
        overall_ipv4_pct = ( 100 * ( counts[ last_timestamp ][ 'v4_tcp_txrx' ][ index ] + counts[ last_timestamp ][ 'v4_udp_txrx' ][ index ] ) /
                             ( counts[ last_timestamp ][ 'v4_tcp_txrx' ][ index ] + counts[ last_timestamp ][ 'v4_udp_txrx' ][ index ] +
                               counts[ last_timestamp ][ 'v6_tcp_txrx' ][ index ] + counts[ last_timestamp ][ 'v6_udp_txrx' ][ index ] ) )
        print( f"Percentage breakdown of TCP traffic (in {metric}): IPv4: {tcp_ipv4_pct: .2f}, IPv6: {( 100 - tcp_ipv4_pct ): .2f}" )
        print( f"Percentage breakdown of UDP traffic (in {metric}): IPv4: {udp_ipv4_pct: .2f}, IPv6: {( 100 - udp_ipv4_pct ): .2f}" )
        print( f"Percentage breakdown of all traffic (in {metric}): IPv4: {overall_ipv4_pct: .2f}, IPv6: {( 100 - overall_ipv4_pct ): .2f}" )

    for ax in ( ax_bytes, ax_bytes_delta, ax_pkts, ax_pkts_delta ):
        plt.setp( ax.get_xticklabels(), rotation=30, horizontalalignment='right' )
    plt.draw()
    plt.waitforbuttonpress()

if __name__ == "__main__":
    main()